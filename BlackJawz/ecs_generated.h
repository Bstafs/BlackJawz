// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ECS_ECS_H_
#define FLATBUFFERS_GENERATED_ECS_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace ECS {

struct Transform;
struct TransformBuilder;

struct Geometry;
struct GeometryBuilder;

struct Texture;
struct TextureBuilder;

struct Appearance;
struct AppearanceBuilder;

struct Light;
struct LightBuilder;

struct Entity;
struct EntityBuilder;

struct Scene;
struct SceneBuilder;

enum LightType : int8_t {
  LightType_Point = 0,
  LightType_Directional = 1,
  LightType_Spot = 2,
  LightType_MIN = LightType_Point,
  LightType_MAX = LightType_Spot
};

inline const LightType (&EnumValuesLightType())[3] {
  static const LightType values[] = {
    LightType_Point,
    LightType_Directional,
    LightType_Spot
  };
  return values;
}

inline const char * const *EnumNamesLightType() {
  static const char * const names[4] = {
    "Point",
    "Directional",
    "Spot",
    nullptr
  };
  return names;
}

inline const char *EnumNameLightType(LightType e) {
  if (::flatbuffers::IsOutRange(e, LightType_Point, LightType_Spot)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLightType()[index];
}

struct Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ROTATION = 6,
    VT_SCALE = 8,
    VT_WORLD_MATRIX = 10
  };
  const ::flatbuffers::Vector<float> *position() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_POSITION);
  }
  const ::flatbuffers::Vector<float> *rotation() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_ROTATION);
  }
  const ::flatbuffers::Vector<float> *scale() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_SCALE);
  }
  const ::flatbuffers::Vector<float> *world_matrix() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_WORLD_MATRIX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyVector(position()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyVector(rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyVector(scale()) &&
           VerifyOffset(verifier, VT_WORLD_MATRIX) &&
           verifier.VerifyVector(world_matrix()) &&
           verifier.EndTable();
  }
};

struct TransformBuilder {
  typedef Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<::flatbuffers::Vector<float>> position) {
    fbb_.AddOffset(Transform::VT_POSITION, position);
  }
  void add_rotation(::flatbuffers::Offset<::flatbuffers::Vector<float>> rotation) {
    fbb_.AddOffset(Transform::VT_ROTATION, rotation);
  }
  void add_scale(::flatbuffers::Offset<::flatbuffers::Vector<float>> scale) {
    fbb_.AddOffset(Transform::VT_SCALE, scale);
  }
  void add_world_matrix(::flatbuffers::Offset<::flatbuffers::Vector<float>> world_matrix) {
    fbb_.AddOffset(Transform::VT_WORLD_MATRIX, world_matrix);
  }
  explicit TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Transform> CreateTransform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> position = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> rotation = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> scale = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> world_matrix = 0) {
  TransformBuilder builder_(_fbb);
  builder_.add_world_matrix(world_matrix);
  builder_.add_scale(scale);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Transform> CreateTransformDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *position = nullptr,
    const std::vector<float> *rotation = nullptr,
    const std::vector<float> *scale = nullptr,
    const std::vector<float> *world_matrix = nullptr) {
  auto position__ = position ? _fbb.CreateVector<float>(*position) : 0;
  auto rotation__ = rotation ? _fbb.CreateVector<float>(*rotation) : 0;
  auto scale__ = scale ? _fbb.CreateVector<float>(*scale) : 0;
  auto world_matrix__ = world_matrix ? _fbb.CreateVector<float>(*world_matrix) : 0;
  return ECS::CreateTransform(
      _fbb,
      position__,
      rotation__,
      scale__,
      world_matrix__);
}

struct Geometry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICES_COUNT = 4,
    VT_VERTEX_BUFFER_STRIDE = 6,
    VT_VERTEX_BUFFER_OFFSET = 8,
    VT_VERTEX_BUFFER = 10,
    VT_INDEX_BUFFER = 12
  };
  uint32_t indices_count() const {
    return GetField<uint32_t>(VT_INDICES_COUNT, 0);
  }
  uint32_t vertex_buffer_stride() const {
    return GetField<uint32_t>(VT_VERTEX_BUFFER_STRIDE, 0);
  }
  uint32_t vertex_buffer_offset() const {
    return GetField<uint32_t>(VT_VERTEX_BUFFER_OFFSET, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *vertex_buffer() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VERTEX_BUFFER);
  }
  const ::flatbuffers::Vector<uint8_t> *index_buffer() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_INDEX_BUFFER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_INDICES_COUNT, 4) &&
           VerifyField<uint32_t>(verifier, VT_VERTEX_BUFFER_STRIDE, 4) &&
           VerifyField<uint32_t>(verifier, VT_VERTEX_BUFFER_OFFSET, 4) &&
           VerifyOffset(verifier, VT_VERTEX_BUFFER) &&
           verifier.VerifyVector(vertex_buffer()) &&
           VerifyOffset(verifier, VT_INDEX_BUFFER) &&
           verifier.VerifyVector(index_buffer()) &&
           verifier.EndTable();
  }
};

struct GeometryBuilder {
  typedef Geometry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_indices_count(uint32_t indices_count) {
    fbb_.AddElement<uint32_t>(Geometry::VT_INDICES_COUNT, indices_count, 0);
  }
  void add_vertex_buffer_stride(uint32_t vertex_buffer_stride) {
    fbb_.AddElement<uint32_t>(Geometry::VT_VERTEX_BUFFER_STRIDE, vertex_buffer_stride, 0);
  }
  void add_vertex_buffer_offset(uint32_t vertex_buffer_offset) {
    fbb_.AddElement<uint32_t>(Geometry::VT_VERTEX_BUFFER_OFFSET, vertex_buffer_offset, 0);
  }
  void add_vertex_buffer(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> vertex_buffer) {
    fbb_.AddOffset(Geometry::VT_VERTEX_BUFFER, vertex_buffer);
  }
  void add_index_buffer(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> index_buffer) {
    fbb_.AddOffset(Geometry::VT_INDEX_BUFFER, index_buffer);
  }
  explicit GeometryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Geometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Geometry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Geometry> CreateGeometry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t indices_count = 0,
    uint32_t vertex_buffer_stride = 0,
    uint32_t vertex_buffer_offset = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> vertex_buffer = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> index_buffer = 0) {
  GeometryBuilder builder_(_fbb);
  builder_.add_index_buffer(index_buffer);
  builder_.add_vertex_buffer(vertex_buffer);
  builder_.add_vertex_buffer_offset(vertex_buffer_offset);
  builder_.add_vertex_buffer_stride(vertex_buffer_stride);
  builder_.add_indices_count(indices_count);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Geometry> CreateGeometryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t indices_count = 0,
    uint32_t vertex_buffer_stride = 0,
    uint32_t vertex_buffer_offset = 0,
    const std::vector<uint8_t> *vertex_buffer = nullptr,
    const std::vector<uint8_t> *index_buffer = nullptr) {
  auto vertex_buffer__ = vertex_buffer ? _fbb.CreateVector<uint8_t>(*vertex_buffer) : 0;
  auto index_buffer__ = index_buffer ? _fbb.CreateVector<uint8_t>(*index_buffer) : 0;
  return ECS::CreateGeometry(
      _fbb,
      indices_count,
      vertex_buffer_stride,
      vertex_buffer_offset,
      vertex_buffer__,
      index_buffer__);
}

struct Texture FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TextureBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DDS_DATA_DIFFUSE = 4,
    VT_DDS_DATA_NORMAL = 6
  };
  const ::flatbuffers::Vector<uint8_t> *dds_data_diffuse() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DDS_DATA_DIFFUSE);
  }
  const ::flatbuffers::Vector<uint8_t> *dds_data_normal() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DDS_DATA_NORMAL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DDS_DATA_DIFFUSE) &&
           verifier.VerifyVector(dds_data_diffuse()) &&
           VerifyOffset(verifier, VT_DDS_DATA_NORMAL) &&
           verifier.VerifyVector(dds_data_normal()) &&
           verifier.EndTable();
  }
};

struct TextureBuilder {
  typedef Texture Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dds_data_diffuse(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> dds_data_diffuse) {
    fbb_.AddOffset(Texture::VT_DDS_DATA_DIFFUSE, dds_data_diffuse);
  }
  void add_dds_data_normal(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> dds_data_normal) {
    fbb_.AddOffset(Texture::VT_DDS_DATA_NORMAL, dds_data_normal);
  }
  explicit TextureBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Texture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Texture>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Texture> CreateTexture(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> dds_data_diffuse = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> dds_data_normal = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_dds_data_normal(dds_data_normal);
  builder_.add_dds_data_diffuse(dds_data_diffuse);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Texture> CreateTextureDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *dds_data_diffuse = nullptr,
    const std::vector<uint8_t> *dds_data_normal = nullptr) {
  auto dds_data_diffuse__ = dds_data_diffuse ? _fbb.CreateVector<uint8_t>(*dds_data_diffuse) : 0;
  auto dds_data_normal__ = dds_data_normal ? _fbb.CreateVector<uint8_t>(*dds_data_normal) : 0;
  return ECS::CreateTexture(
      _fbb,
      dds_data_diffuse__,
      dds_data_normal__);
}

struct Appearance FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AppearanceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GEOMETRY = 4,
    VT_TEXTURE = 6
  };
  const ECS::Geometry *geometry() const {
    return GetPointer<const ECS::Geometry *>(VT_GEOMETRY);
  }
  const ECS::Texture *texture() const {
    return GetPointer<const ECS::Texture *>(VT_TEXTURE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyTable(geometry()) &&
           VerifyOffset(verifier, VT_TEXTURE) &&
           verifier.VerifyTable(texture()) &&
           verifier.EndTable();
  }
};

struct AppearanceBuilder {
  typedef Appearance Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_geometry(::flatbuffers::Offset<ECS::Geometry> geometry) {
    fbb_.AddOffset(Appearance::VT_GEOMETRY, geometry);
  }
  void add_texture(::flatbuffers::Offset<ECS::Texture> texture) {
    fbb_.AddOffset(Appearance::VT_TEXTURE, texture);
  }
  explicit AppearanceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Appearance> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Appearance>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Appearance> CreateAppearance(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<ECS::Geometry> geometry = 0,
    ::flatbuffers::Offset<ECS::Texture> texture = 0) {
  AppearanceBuilder builder_(_fbb);
  builder_.add_texture(texture);
  builder_.add_geometry(geometry);
  return builder_.Finish();
}

struct Light FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DIFFUSE_LIGHT = 6,
    VT_AMBIENT_LIGHT = 8,
    VT_SPECULAR_LIGHT = 10,
    VT_SPECULAR_POWER = 12,
    VT_RANGE = 14,
    VT_DIRECTION = 16,
    VT_INTENSITY = 18,
    VT_ATTENUATION = 20,
    VT_SPOT_INNER_CONE = 22,
    VT_SPOT_OUTER_CONE = 24
  };
  ECS::LightType type() const {
    return static_cast<ECS::LightType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::Vector<float> *diffuse_light() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_DIFFUSE_LIGHT);
  }
  const ::flatbuffers::Vector<float> *ambient_light() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_AMBIENT_LIGHT);
  }
  const ::flatbuffers::Vector<float> *specular_light() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_SPECULAR_LIGHT);
  }
  float specular_power() const {
    return GetField<float>(VT_SPECULAR_POWER, 0.0f);
  }
  float range() const {
    return GetField<float>(VT_RANGE, 0.0f);
  }
  const ::flatbuffers::Vector<float> *direction() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_DIRECTION);
  }
  float intensity() const {
    return GetField<float>(VT_INTENSITY, 0.0f);
  }
  const ::flatbuffers::Vector<float> *attenuation() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_ATTENUATION);
  }
  float spot_inner_cone() const {
    return GetField<float>(VT_SPOT_INNER_CONE, 0.0f);
  }
  float spot_outer_cone() const {
    return GetField<float>(VT_SPOT_OUTER_CONE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_DIFFUSE_LIGHT) &&
           verifier.VerifyVector(diffuse_light()) &&
           VerifyOffset(verifier, VT_AMBIENT_LIGHT) &&
           verifier.VerifyVector(ambient_light()) &&
           VerifyOffset(verifier, VT_SPECULAR_LIGHT) &&
           verifier.VerifyVector(specular_light()) &&
           VerifyField<float>(verifier, VT_SPECULAR_POWER, 4) &&
           VerifyField<float>(verifier, VT_RANGE, 4) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyVector(direction()) &&
           VerifyField<float>(verifier, VT_INTENSITY, 4) &&
           VerifyOffset(verifier, VT_ATTENUATION) &&
           verifier.VerifyVector(attenuation()) &&
           VerifyField<float>(verifier, VT_SPOT_INNER_CONE, 4) &&
           VerifyField<float>(verifier, VT_SPOT_OUTER_CONE, 4) &&
           verifier.EndTable();
  }
};

struct LightBuilder {
  typedef Light Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(ECS::LightType type) {
    fbb_.AddElement<int8_t>(Light::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_diffuse_light(::flatbuffers::Offset<::flatbuffers::Vector<float>> diffuse_light) {
    fbb_.AddOffset(Light::VT_DIFFUSE_LIGHT, diffuse_light);
  }
  void add_ambient_light(::flatbuffers::Offset<::flatbuffers::Vector<float>> ambient_light) {
    fbb_.AddOffset(Light::VT_AMBIENT_LIGHT, ambient_light);
  }
  void add_specular_light(::flatbuffers::Offset<::flatbuffers::Vector<float>> specular_light) {
    fbb_.AddOffset(Light::VT_SPECULAR_LIGHT, specular_light);
  }
  void add_specular_power(float specular_power) {
    fbb_.AddElement<float>(Light::VT_SPECULAR_POWER, specular_power, 0.0f);
  }
  void add_range(float range) {
    fbb_.AddElement<float>(Light::VT_RANGE, range, 0.0f);
  }
  void add_direction(::flatbuffers::Offset<::flatbuffers::Vector<float>> direction) {
    fbb_.AddOffset(Light::VT_DIRECTION, direction);
  }
  void add_intensity(float intensity) {
    fbb_.AddElement<float>(Light::VT_INTENSITY, intensity, 0.0f);
  }
  void add_attenuation(::flatbuffers::Offset<::flatbuffers::Vector<float>> attenuation) {
    fbb_.AddOffset(Light::VT_ATTENUATION, attenuation);
  }
  void add_spot_inner_cone(float spot_inner_cone) {
    fbb_.AddElement<float>(Light::VT_SPOT_INNER_CONE, spot_inner_cone, 0.0f);
  }
  void add_spot_outer_cone(float spot_outer_cone) {
    fbb_.AddElement<float>(Light::VT_SPOT_OUTER_CONE, spot_outer_cone, 0.0f);
  }
  explicit LightBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Light> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Light>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Light> CreateLight(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ECS::LightType type = ECS::LightType_Point,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> diffuse_light = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> ambient_light = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> specular_light = 0,
    float specular_power = 0.0f,
    float range = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> direction = 0,
    float intensity = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> attenuation = 0,
    float spot_inner_cone = 0.0f,
    float spot_outer_cone = 0.0f) {
  LightBuilder builder_(_fbb);
  builder_.add_spot_outer_cone(spot_outer_cone);
  builder_.add_spot_inner_cone(spot_inner_cone);
  builder_.add_attenuation(attenuation);
  builder_.add_intensity(intensity);
  builder_.add_direction(direction);
  builder_.add_range(range);
  builder_.add_specular_power(specular_power);
  builder_.add_specular_light(specular_light);
  builder_.add_ambient_light(ambient_light);
  builder_.add_diffuse_light(diffuse_light);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Light> CreateLightDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ECS::LightType type = ECS::LightType_Point,
    const std::vector<float> *diffuse_light = nullptr,
    const std::vector<float> *ambient_light = nullptr,
    const std::vector<float> *specular_light = nullptr,
    float specular_power = 0.0f,
    float range = 0.0f,
    const std::vector<float> *direction = nullptr,
    float intensity = 0.0f,
    const std::vector<float> *attenuation = nullptr,
    float spot_inner_cone = 0.0f,
    float spot_outer_cone = 0.0f) {
  auto diffuse_light__ = diffuse_light ? _fbb.CreateVector<float>(*diffuse_light) : 0;
  auto ambient_light__ = ambient_light ? _fbb.CreateVector<float>(*ambient_light) : 0;
  auto specular_light__ = specular_light ? _fbb.CreateVector<float>(*specular_light) : 0;
  auto direction__ = direction ? _fbb.CreateVector<float>(*direction) : 0;
  auto attenuation__ = attenuation ? _fbb.CreateVector<float>(*attenuation) : 0;
  return ECS::CreateLight(
      _fbb,
      type,
      diffuse_light__,
      ambient_light__,
      specular_light__,
      specular_power,
      range,
      direction__,
      intensity,
      attenuation__,
      spot_inner_cone,
      spot_outer_cone);
}

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_TRANSFORM = 8,
    VT_APPEARANCE = 10,
    VT_LIGHT = 12
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ECS::Transform *transform() const {
    return GetPointer<const ECS::Transform *>(VT_TRANSFORM);
  }
  const ECS::Appearance *appearance() const {
    return GetPointer<const ECS::Appearance *>(VT_APPEARANCE);
  }
  const ECS::Light *light() const {
    return GetPointer<const ECS::Light *>(VT_LIGHT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyTable(transform()) &&
           VerifyOffset(verifier, VT_APPEARANCE) &&
           verifier.VerifyTable(appearance()) &&
           VerifyOffset(verifier, VT_LIGHT) &&
           verifier.VerifyTable(light()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Entity::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Entity::VT_NAME, name);
  }
  void add_transform(::flatbuffers::Offset<ECS::Transform> transform) {
    fbb_.AddOffset(Entity::VT_TRANSFORM, transform);
  }
  void add_appearance(::flatbuffers::Offset<ECS::Appearance> appearance) {
    fbb_.AddOffset(Entity::VT_APPEARANCE, appearance);
  }
  void add_light(::flatbuffers::Offset<ECS::Light> light) {
    fbb_.AddOffset(Entity::VT_LIGHT, light);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<ECS::Transform> transform = 0,
    ::flatbuffers::Offset<ECS::Appearance> appearance = 0,
    ::flatbuffers::Offset<ECS::Light> light = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_light(light);
  builder_.add_appearance(appearance);
  builder_.add_transform(transform);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entity> CreateEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr,
    ::flatbuffers::Offset<ECS::Transform> transform = 0,
    ::flatbuffers::Offset<ECS::Appearance> appearance = 0,
    ::flatbuffers::Offset<ECS::Light> light = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ECS::CreateEntity(
      _fbb,
      id,
      name__,
      transform,
      appearance,
      light);
}

struct Scene FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITIES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<ECS::Entity>> *entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ECS::Entity>> *>(VT_ENTITIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct SceneBuilder {
  typedef Scene Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ECS::Entity>>> entities) {
    fbb_.AddOffset(Scene::VT_ENTITIES, entities);
  }
  explicit SceneBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Scene> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Scene>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Scene> CreateScene(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ECS::Entity>>> entities = 0) {
  SceneBuilder builder_(_fbb);
  builder_.add_entities(entities);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Scene> CreateSceneDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<ECS::Entity>> *entities = nullptr) {
  auto entities__ = entities ? _fbb.CreateVector<::flatbuffers::Offset<ECS::Entity>>(*entities) : 0;
  return ECS::CreateScene(
      _fbb,
      entities__);
}

inline const ECS::Scene *GetScene(const void *buf) {
  return ::flatbuffers::GetRoot<ECS::Scene>(buf);
}

inline const ECS::Scene *GetSizePrefixedScene(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ECS::Scene>(buf);
}

inline bool VerifySceneBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ECS::Scene>(nullptr);
}

inline bool VerifySizePrefixedSceneBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ECS::Scene>(nullptr);
}

inline void FinishSceneBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ECS::Scene> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ECS::Scene> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ECS

#endif  // FLATBUFFERS_GENERATED_ECS_ECS_H_
