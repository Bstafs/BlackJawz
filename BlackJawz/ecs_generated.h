// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ECS_ECS_H_
#define FLATBUFFERS_GENERATED_ECS_ECS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace ECS {

struct Transform;
struct TransformBuilder;

struct Geometry;
struct GeometryBuilder;

struct Appearance;
struct AppearanceBuilder;

struct Entity;
struct EntityBuilder;

struct Scene;
struct SceneBuilder;

struct Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ROTATION = 6,
    VT_SCALE = 8,
    VT_WORLD_MATRIX = 10
  };
  const ::flatbuffers::Vector<float> *position() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_POSITION);
  }
  const ::flatbuffers::Vector<float> *rotation() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_ROTATION);
  }
  const ::flatbuffers::Vector<float> *scale() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_SCALE);
  }
  const ::flatbuffers::Vector<float> *world_matrix() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_WORLD_MATRIX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyVector(position()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyVector(rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyVector(scale()) &&
           VerifyOffset(verifier, VT_WORLD_MATRIX) &&
           verifier.VerifyVector(world_matrix()) &&
           verifier.EndTable();
  }
};

struct TransformBuilder {
  typedef Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<::flatbuffers::Vector<float>> position) {
    fbb_.AddOffset(Transform::VT_POSITION, position);
  }
  void add_rotation(::flatbuffers::Offset<::flatbuffers::Vector<float>> rotation) {
    fbb_.AddOffset(Transform::VT_ROTATION, rotation);
  }
  void add_scale(::flatbuffers::Offset<::flatbuffers::Vector<float>> scale) {
    fbb_.AddOffset(Transform::VT_SCALE, scale);
  }
  void add_world_matrix(::flatbuffers::Offset<::flatbuffers::Vector<float>> world_matrix) {
    fbb_.AddOffset(Transform::VT_WORLD_MATRIX, world_matrix);
  }
  explicit TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Transform> CreateTransform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> position = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> rotation = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> scale = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> world_matrix = 0) {
  TransformBuilder builder_(_fbb);
  builder_.add_world_matrix(world_matrix);
  builder_.add_scale(scale);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Transform> CreateTransformDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *position = nullptr,
    const std::vector<float> *rotation = nullptr,
    const std::vector<float> *scale = nullptr,
    const std::vector<float> *world_matrix = nullptr) {
  auto position__ = position ? _fbb.CreateVector<float>(*position) : 0;
  auto rotation__ = rotation ? _fbb.CreateVector<float>(*rotation) : 0;
  auto scale__ = scale ? _fbb.CreateVector<float>(*scale) : 0;
  auto world_matrix__ = world_matrix ? _fbb.CreateVector<float>(*world_matrix) : 0;
  return ECS::CreateTransform(
      _fbb,
      position__,
      rotation__,
      scale__,
      world_matrix__);
}

struct Geometry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICES_COUNT = 4,
    VT_VERTEX_BUFFER_STRIDE = 6,
    VT_VERTEX_BUFFER_OFFSET = 8
  };
  uint32_t indices_count() const {
    return GetField<uint32_t>(VT_INDICES_COUNT, 0);
  }
  uint32_t vertex_buffer_stride() const {
    return GetField<uint32_t>(VT_VERTEX_BUFFER_STRIDE, 0);
  }
  uint32_t vertex_buffer_offset() const {
    return GetField<uint32_t>(VT_VERTEX_BUFFER_OFFSET, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_INDICES_COUNT, 4) &&
           VerifyField<uint32_t>(verifier, VT_VERTEX_BUFFER_STRIDE, 4) &&
           VerifyField<uint32_t>(verifier, VT_VERTEX_BUFFER_OFFSET, 4) &&
           verifier.EndTable();
  }
};

struct GeometryBuilder {
  typedef Geometry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_indices_count(uint32_t indices_count) {
    fbb_.AddElement<uint32_t>(Geometry::VT_INDICES_COUNT, indices_count, 0);
  }
  void add_vertex_buffer_stride(uint32_t vertex_buffer_stride) {
    fbb_.AddElement<uint32_t>(Geometry::VT_VERTEX_BUFFER_STRIDE, vertex_buffer_stride, 0);
  }
  void add_vertex_buffer_offset(uint32_t vertex_buffer_offset) {
    fbb_.AddElement<uint32_t>(Geometry::VT_VERTEX_BUFFER_OFFSET, vertex_buffer_offset, 0);
  }
  explicit GeometryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Geometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Geometry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Geometry> CreateGeometry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t indices_count = 0,
    uint32_t vertex_buffer_stride = 0,
    uint32_t vertex_buffer_offset = 0) {
  GeometryBuilder builder_(_fbb);
  builder_.add_vertex_buffer_offset(vertex_buffer_offset);
  builder_.add_vertex_buffer_stride(vertex_buffer_stride);
  builder_.add_indices_count(indices_count);
  return builder_.Finish();
}

struct Appearance FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AppearanceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GEOMETRY = 4
  };
  const ECS::Geometry *geometry() const {
    return GetPointer<const ECS::Geometry *>(VT_GEOMETRY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyTable(geometry()) &&
           verifier.EndTable();
  }
};

struct AppearanceBuilder {
  typedef Appearance Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_geometry(::flatbuffers::Offset<ECS::Geometry> geometry) {
    fbb_.AddOffset(Appearance::VT_GEOMETRY, geometry);
  }
  explicit AppearanceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Appearance> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Appearance>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Appearance> CreateAppearance(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<ECS::Geometry> geometry = 0) {
  AppearanceBuilder builder_(_fbb);
  builder_.add_geometry(geometry);
  return builder_.Finish();
}

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_TRANSFORM = 8,
    VT_APPEARANCE = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ECS::Transform *transform() const {
    return GetPointer<const ECS::Transform *>(VT_TRANSFORM);
  }
  const ECS::Appearance *appearance() const {
    return GetPointer<const ECS::Appearance *>(VT_APPEARANCE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyTable(transform()) &&
           VerifyOffset(verifier, VT_APPEARANCE) &&
           verifier.VerifyTable(appearance()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Entity::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Entity::VT_NAME, name);
  }
  void add_transform(::flatbuffers::Offset<ECS::Transform> transform) {
    fbb_.AddOffset(Entity::VT_TRANSFORM, transform);
  }
  void add_appearance(::flatbuffers::Offset<ECS::Appearance> appearance) {
    fbb_.AddOffset(Entity::VT_APPEARANCE, appearance);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<ECS::Transform> transform = 0,
    ::flatbuffers::Offset<ECS::Appearance> appearance = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_appearance(appearance);
  builder_.add_transform(transform);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entity> CreateEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr,
    ::flatbuffers::Offset<ECS::Transform> transform = 0,
    ::flatbuffers::Offset<ECS::Appearance> appearance = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ECS::CreateEntity(
      _fbb,
      id,
      name__,
      transform,
      appearance);
}

struct Scene FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITIES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<ECS::Entity>> *entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ECS::Entity>> *>(VT_ENTITIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct SceneBuilder {
  typedef Scene Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ECS::Entity>>> entities) {
    fbb_.AddOffset(Scene::VT_ENTITIES, entities);
  }
  explicit SceneBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Scene> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Scene>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Scene> CreateScene(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ECS::Entity>>> entities = 0) {
  SceneBuilder builder_(_fbb);
  builder_.add_entities(entities);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Scene> CreateSceneDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<ECS::Entity>> *entities = nullptr) {
  auto entities__ = entities ? _fbb.CreateVector<::flatbuffers::Offset<ECS::Entity>>(*entities) : 0;
  return ECS::CreateScene(
      _fbb,
      entities__);
}

inline const ECS::Scene *GetScene(const void *buf) {
  return ::flatbuffers::GetRoot<ECS::Scene>(buf);
}

inline const ECS::Scene *GetSizePrefixedScene(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ECS::Scene>(buf);
}

inline bool VerifySceneBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ECS::Scene>(nullptr);
}

inline bool VerifySizePrefixedSceneBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ECS::Scene>(nullptr);
}

inline void FinishSceneBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ECS::Scene> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ECS::Scene> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ECS

#endif  // FLATBUFFERS_GENERATED_ECS_ECS_H_
